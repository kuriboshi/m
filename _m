#!/bin/ksh

# Copyright 2018 Krister Joas <krister@joas.jp>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# We start with a 'project' section.  This section contains global
# configuration options.  Most can be overridden per library/binary.
project hello_world

# The 'ccflags', 'cflags', and 'ldflags' directives specify the global
# flags to pass to the compiler, unless overridden by a library or
# binary specific directive.
ccflags -g -std=c++17
ldflags -g

# The 'incs' directive adds on or more include directories which are
# added to the compiler command line.
incs lib
incs include

# Define the extension used for source files with 'ext'.  The default
# is '.cc'.  Supported extensions: .c, .cc, .cpp, .cxx, and .C.
ext .cc

# Next we define libraries and binaries to build.  Define a library
# called 'hello' with the 'lib' directive.
lib hello

  # The optional 'srcs' directive specifies where the source files are
  # located.
  srcs lib/hello

  # Specify a directory where to find header files for the library.
  incs lib/hello

  # Add definitions with 'add def'.  Beware of quoting strings: The
  # ksh93 version handles quotes poorly.
  add def -DHELLO=WORLD

  # Add source files using the 'add src' directive.  No need to
  # specify the extension.
  add src hello

# Define a second library which depends on the 'hello' library.
lib world
  srcs lib/world
  incs lib/world
  add src world

  # Add a dependency on the library 'hello'.
  add lib hello

# The 'subdirs' command searches the directory for '_m' files and
# processes them in the order they're given.  Note that the '_m' files
# are read in order and dependencies has to be declared before use.
# Alternatively you can use the 'load' directive to load a specific
# '_m' file.
subdirs bin
